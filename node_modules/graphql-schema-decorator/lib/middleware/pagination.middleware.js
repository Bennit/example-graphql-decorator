"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const page_info_type_1 = require("../page-info.type");
const pagination_type_1 = require("../pagination.type");
const metadata_builder_1 = require("../metadata-builder");
function PaginationMiddleware(target, propertyKey, methodDescriptor) {
    return {
        value: function (...args) {
            return __awaiter(this, void 0, void 0, function* () {
                let [data, count] = yield methodDescriptor.value.apply(this, args);
                return metadata_builder_1.getMetadataBuilder().buildFieldMetadata(target)
                    .filter(metadata => metadata.property === propertyKey)
                    .map(metadata => metadata.arguments)
                    .map(fieldArguments => {
                    const paginationValues = fieldArguments
                        .reduce((indexMap, metadata) => {
                        indexMap[metadata.name] = metadata.index;
                        return indexMap;
                    }, {});
                    return new pagination_type_1.PaginationResponse(count, data, new page_info_type_1.PageInfo(count, paginationValues['offset'], paginationValues['limit']));
                })
                    .find((_, index) => index === 0);
            });
        },
    };
}
exports.PaginationMiddleware = PaginationMiddleware;
//# sourceMappingURL=pagination.middleware.js.map