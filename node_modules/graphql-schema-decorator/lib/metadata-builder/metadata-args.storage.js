"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const metadata_utils_1 = require("./metadata.utils");
class MetadataArgsStorage {
    constructor() {
        this.enums = [];
        this.enumValues = [];
        this.union = [];
        this.objects = [];
        this.entries = [];
        this.schemas = [];
        this.fields = [];
        this.arguments = [];
        this.contexts = [];
        this.roots = [];
        this.orderBys = [];
        this.befores = [];
        this.interfaces = [];
        this.afters = [];
    }
    filterEnumsByClass(target) {
        return this.enums.filter(item => item.target === target);
    }
    filterEnumValuesByClass(target) {
        return this.enumValues.filter(item => item.target === target.prototype);
    }
    filterUnionTypeByClass(target) {
        return this.union.filter(item => item.target === target);
    }
    filterInterfaceTypeByClass(target) {
        return this.interfaces.filter(item => item.target === target);
    }
    filterObjectTypeByClass(target) {
        return this.objects.filter(item => item.target === target);
    }
    filterEntryTypesByClassAndType(target, type) {
        return this.entries.filter(item => item.target === target.prototype && item.type === type);
    }
    filterSchemaByClass(target) {
        return this.schemas.filter(item => item.target === target);
    }
    filterFieldByClass(target) {
        const inheritanceTree = metadata_utils_1.MetadataUtils.getInheritanceTree(target);
        return this.filterByTargetAndWithoutDuplicateProperties(this.fields, inheritanceTree);
    }
    filterArgumentByClassAndProperty(target, property) {
        return this.arguments.filter(item => item.target === target && item.property === property);
    }
    filterContextByClassAndProperty(target, property) {
        return this.contexts.filter(item => item.target === target && item.property === property);
    }
    filterRootByClassAndProperty(target, property) {
        return this.roots.filter(item => item.target === target && item.property === property);
    }
    filterOrderByByClassAndProperty(target, property) {
        return this.orderBys.filter(item => item.target === target && item.property === property);
    }
    filterBeforeByByClassAndProperty(target, property) {
        return this.befores.filter(item => item.target === target && item.property === property);
    }
    filterAfterByByClassAndProperty(target, property) {
        return this.afters.filter(item => item.target === target && item.property === property);
    }
    /**
     * Filters given array by a given target or targets and prevents duplicate property names.
     */
    filterByTargetAndWithoutDuplicateProperties(array, target) {
        const newArray = [];
        array.forEach(item => {
            const sameTarget = target instanceof Array ? target.indexOf(item.target) !== -1 : item.target === target;
            if (sameTarget) {
                if (!newArray.find(newItem => newItem.property === item.property))
                    newArray.push(item);
            }
        });
        return newArray;
    }
}
exports.MetadataArgsStorage = MetadataArgsStorage;
/**
 * Gets metadata args storage.
 * Metadata args storage follows the best practices and stores metadata in a global variable.
 */
function getMetadataArgsStorage() {
    if (!global.graphqlSchemaMetadataArgsStorage) {
        global.graphqlSchemaMetadataArgsStorage = new MetadataArgsStorage();
    }
    return global.graphqlSchemaMetadataArgsStorage;
}
exports.getMetadataArgsStorage = getMetadataArgsStorage;
//# sourceMappingURL=metadata-args.storage.js.map