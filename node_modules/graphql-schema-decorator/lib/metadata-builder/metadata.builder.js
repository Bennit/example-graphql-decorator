"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const array_utils_1 = require("../array.utils");
const args_1 = require("../metadata/args");
const metadata_args_storage_1 = require("./metadata-args.storage");
class MetadataBuilder {
    buildEnumMetadata(target) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterEnumsByClass(target)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            values: this.buildEnumValueMetadata(target),
        }));
    }
    buildUnionTypeMetadata(target) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterUnionTypeByClass(target)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            resolver: arg.resolver,
            types: arg.types,
            description: arg.description,
        }));
    }
    buildInterfaceTypeMetadata(target) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterInterfaceTypeByClass(target)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            resolver: arg.resolver,
            description: arg.description,
        }));
    }
    buildObjectTypeMetadata(target) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterObjectTypeByClass(target)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            isInput: arg.isInput,
            interfaces: array_utils_1.flatten(arg.interfaces.map(this.buildInterfaceTypeMetadata)),
        }));
    }
    buildEntryTypeMetadata(target, type) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterEntryTypesByClassAndType(target, type)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            property: arg.property,
            isSubscription: type === args_1.EntryType.Subscription,
        }));
    }
    buildSchemaMetadata(target) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterSchemaByClass(target)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
        }));
    }
    buildFieldMetadata(target) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterFieldByClass(target)
            .map((arg) => ({
            type: arg.type,
            target: arg.target,
            name: arg.name,
            description: arg.description,
            isNonNull: !!arg.nonNull,
            isList: !!arg.isList,
            isPagination: !!arg.pagination,
            property: arg.property,
            arguments: this.buildArgumentMetadata(target, arg.property),
            context: this.buildContextMetadata(target, arg.property),
            root: this.buildRootMetadata(target, arg.property),
            orderBy: this.buildOrderByMetadata(target, arg.property),
            before: this.buildBeforeMetadata(target, arg.property),
            after: this.buildAfterMetadata(target, arg.property),
        }));
    }
    buildArgumentMetadata(target, property) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterArgumentByClassAndProperty(target, property)
            .map(arg => ({
            type: arg.type,
            target: arg.target,
            name: arg.name,
            description: arg.description,
            index: arg.index,
            property: arg.property,
            isNonNull: !!arg.nonNull,
            isList: !!arg.isList,
        }));
    }
    buildContextMetadata(target, property) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterContextByClassAndProperty(target, property)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            index: arg.index,
            property: arg.property,
        }))
            .find((_, index) => index === 0);
    }
    buildRootMetadata(target, property) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterRootByClassAndProperty(target, property)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            index: arg.index,
            property: arg.property,
        }))
            .find((_, index) => index === 0);
    }
    buildOrderByMetadata(target, property) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterOrderByByClassAndProperty(target, property)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            index: arg.index,
            property: arg.property,
            extraColumns: arg.extraColumns,
            shouldIgnoreSchemaFields: arg.shouldIgnoreSchemaFields,
            isNonNull: false,
            isList: false,
        }))
            .find((_, index) => index === 0);
    }
    buildBeforeMetadata(target, property) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterBeforeByByClassAndProperty(target, property)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            index: arg.index,
            property: arg.property,
            middleware: arg.middleware,
        }))
            .find((_, index) => index === 0);
    }
    buildEnumValueMetadata(target) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterEnumValuesByClass(target)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            value: arg.value,
            description: arg.description,
        }));
    }
    buildAfterMetadata(target, property) {
        return metadata_args_storage_1.getMetadataArgsStorage()
            .filterAfterByByClassAndProperty(target, property)
            .map(arg => ({
            target: arg.target,
            name: arg.name,
            description: arg.description,
            index: arg.index,
            property: arg.property,
            middleware: arg.middleware,
        }))
            .find((_, index) => index === 0);
    }
}
exports.MetadataBuilder = MetadataBuilder;
/**
 * Gets metadata builder
 * Metadata builder follows the best practices and stores metadata in a global variable.
 */
function getMetadataBuilder() {
    if (!global.graphqlSchemaMetadataBuilder) {
        global.graphqlSchemaMetadataBuilder = new MetadataBuilder();
    }
    return global.graphqlSchemaMetadataBuilder;
}
exports.getMetadataBuilder = getMetadataBuilder;
//# sourceMappingURL=metadata.builder.js.map