{"version":3,"file":"metadata.builder.js","sourceRoot":"","sources":["../../src/metadata-builder/metadata.builder.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterMetadata,\n  ArgumentMetadata,\n  BeforeMetadata,\n  ContextMetadata,\n  EntryTypeMetadata,\n  EnumTypeMetadata,\n  EnumValueMetadata,\n  FieldMetadata,\n  ObjectTypeMetadata,\n  OrderByMetadata,\n  RootMetadata,\n  SchemaMetadata,\n  UnionTypeMetadata,\n  InterfaceTypeMetadata,\n} from '../metadata/types';\n\nimport { flatten } from '../array.utils';\nimport { EntryType } from '../metadata/args';\nimport { getMetadataArgsStorage } from './metadata-args.storage';\n\nexport class MetadataBuilder {\n\n  buildEnumMetadata(target: any): EnumTypeMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterEnumsByClass(target)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        values: this.buildEnumValueMetadata(target),\n      }));\n  }\n\n  buildUnionTypeMetadata(target: any): UnionTypeMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterUnionTypeByClass(target)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        resolver: arg.resolver,\n        types: arg.types,\n        description: arg.description,\n      }));\n  }\n\n  buildInterfaceTypeMetadata(target: any): InterfaceTypeMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterInterfaceTypeByClass(target)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        resolver: arg.resolver,\n        description: arg.description,\n      }));\n  }\n\n  buildObjectTypeMetadata(target: any): ObjectTypeMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterObjectTypeByClass(target)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        isInput: arg.isInput,\n        interfaces: flatten(arg.interfaces.map(this.buildInterfaceTypeMetadata)),\n      }));\n  }\n\n  buildEntryTypeMetadata(target: any, type: EntryType): EntryTypeMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterEntryTypesByClassAndType(target, type)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        property: arg.property,\n        isSubscription: type === EntryType.Subscription,\n      }));\n  }\n\n  buildSchemaMetadata(target: any): SchemaMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterSchemaByClass(target)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n      }));\n  }\n\n  buildFieldMetadata(target: any): FieldMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterFieldByClass(target)\n      .map((arg) => ({\n        type: arg.type,\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        isNonNull: !!arg.nonNull,\n        isList: !!arg.isList,\n        isPagination: !!arg.pagination,\n        property: arg.property,\n        arguments: this.buildArgumentMetadata(target, arg.property),\n        context: this.buildContextMetadata(target, arg.property),\n        root: this.buildRootMetadata(target, arg.property),\n        orderBy: this.buildOrderByMetadata(target, arg.property),\n        before: this.buildBeforeMetadata(target, arg.property),\n        after: this.buildAfterMetadata(target, arg.property),\n      }));\n  }\n\n  protected buildArgumentMetadata(target: any, property: string): ArgumentMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterArgumentByClassAndProperty(target, property)\n      .map(arg => ({\n        type: arg.type,\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        index: arg.index,\n        property: arg.property,\n        isNonNull: !!arg.nonNull,\n        isList: !!arg.isList,\n      }));\n  }\n\n  protected buildContextMetadata(target: any, property: string): ContextMetadata | undefined {\n    return getMetadataArgsStorage()\n      .filterContextByClassAndProperty(target, property)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        index: arg.index,\n        property: arg.property,\n      }))\n      .find((_, index) => index === 0);\n  }\n\n  protected buildRootMetadata(target: any, property: string): RootMetadata | undefined {\n    return getMetadataArgsStorage()\n      .filterRootByClassAndProperty(target, property)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        index: arg.index,\n        property: arg.property,\n      }))\n      .find((_, index) => index === 0);\n  }\n\n  protected buildOrderByMetadata(target: any, property: string): OrderByMetadata | undefined {\n    return getMetadataArgsStorage()\n      .filterOrderByByClassAndProperty(target, property)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        index: arg.index,\n        property: arg.property,\n        extraColumns: arg.extraColumns,\n        shouldIgnoreSchemaFields: arg.shouldIgnoreSchemaFields,\n        isNonNull: false,\n        isList: false,\n      }))\n      .find((_, index) => index === 0);\n  }\n\n  protected buildBeforeMetadata(target: any, property: string): BeforeMetadata | undefined {\n    return getMetadataArgsStorage()\n      .filterBeforeByByClassAndProperty(target, property)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        index: arg.index,\n        property: arg.property,\n        middleware: arg.middleware,\n      }))\n      .find((_, index) => index === 0);\n  }\n\n  protected buildEnumValueMetadata(target: any): EnumValueMetadata[] | undefined {\n    return getMetadataArgsStorage()\n      .filterEnumValuesByClass(target)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        value: arg.value,\n        description: arg.description,\n      }));\n  }\n\n  protected buildAfterMetadata(target: any, property: string): AfterMetadata | undefined {\n    return getMetadataArgsStorage()\n      .filterAfterByByClassAndProperty(target, property)\n      .map(arg => ({\n        target: arg.target,\n        name: arg.name,\n        description: arg.description,\n        index: arg.index,\n        property: arg.property,\n        middleware: arg.middleware,\n      }))\n      .find((_, index) => index === 0);\n  }\n\n}\n\n/**\n * Gets metadata builder\n * Metadata builder follows the best practices and stores metadata in a global variable.\n */\nexport function getMetadataBuilder(): MetadataBuilder {\n  if (!(global as any).graphqlSchemaMetadataBuilder) {\n    (global as any).graphqlSchemaMetadataBuilder = new MetadataBuilder();\n  }\n\n  return (global as any).graphqlSchemaMetadataBuilder;\n}\n"]}