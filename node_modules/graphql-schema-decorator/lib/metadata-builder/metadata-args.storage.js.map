{"version":3,"file":"metadata-args.storage.js","sourceRoot":"","sources":["../../src/metadata-builder/metadata-args.storage.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterArg,\n  ArgumentArg,\n  BeforeArg,\n  ContextArg,\n  EntryType,\n  EntryTypeArg,\n  EnumTypeArg,\n  EnumValueArg,\n  FieldArg,\n  InterfaceTypeArg,\n  ObjectTypeArg,\n  OrderByArg,\n  RootArg,\n  SchemaArg,\n  UnionTypeArg,\n} from '../metadata/args';\n\nimport { MetadataUtils } from './metadata.utils';\n\nexport class MetadataArgsStorage {\n  enums: EnumTypeArg[] = [];\n  enumValues: EnumValueArg[] = [];\n  union: UnionTypeArg[] = [];\n  objects: ObjectTypeArg[] = [];\n  entries: EntryTypeArg[] = [];\n  schemas: SchemaArg[] = [];\n  fields: FieldArg[] = [];\n  arguments: ArgumentArg[] = [];\n  contexts: ContextArg[] = [];\n  roots: RootArg[] = [];\n  orderBys: OrderByArg[] = [];\n  befores: BeforeArg[] = [];\n  interfaces: InterfaceTypeArg[] = [];\n  afters: AfterArg[] = [];\n\n  filterEnumsByClass(target: any): EnumTypeArg[] {\n    return this.enums.filter(item => item.target === target);\n  }\n\n  filterEnumValuesByClass(target: any): EnumValueArg[] {\n    return this.enumValues.filter(item => item.target === target.prototype);\n  }\n\n  filterUnionTypeByClass(target: any): UnionTypeArg[] {\n    return this.union.filter(item => item.target === target);\n  }\n\n  filterInterfaceTypeByClass(target: any): InterfaceTypeArg[] {\n    return this.interfaces.filter(item => item.target === target);\n  }\n\n  filterObjectTypeByClass(target: any): ObjectTypeArg[] {\n    return this.objects.filter(item => item.target === target);\n  }\n\n  filterEntryTypesByClassAndType(target: any, type: EntryType): EntryTypeArg[] {\n    return this.entries.filter(item => item.target === target.prototype && item.type === type);\n  }\n\n  filterSchemaByClass(target: any): SchemaArg[] {\n    return this.schemas.filter(item => item.target === target);\n  }\n\n  filterFieldByClass(target: any): FieldArg[] {\n    const inheritanceTree = MetadataUtils.getInheritanceTree(target);\n    return this.filterByTargetAndWithoutDuplicateProperties(this.fields, inheritanceTree);\n  }\n\n  filterArgumentByClassAndProperty(target: any, property: string): ArgumentArg[] {\n    return this.arguments.filter(item => item.target === target && item.property === property);\n  }\n\n  filterContextByClassAndProperty(target: any, property: string): ContextArg[] {\n    return this.contexts.filter(item => item.target === target && item.property === property);\n  }\n\n  filterRootByClassAndProperty(target: any, property: string): RootArg[] {\n    return this.roots.filter(item => item.target === target && item.property === property);\n  }\n\n  filterOrderByByClassAndProperty(target: any, property: string): OrderByArg[] {\n    return this.orderBys.filter(item => item.target === target && item.property === property);\n  }\n\n  filterBeforeByByClassAndProperty(target: any, property: string): BeforeArg[] {\n    return this.befores.filter(item => item.target === target && item.property === property);\n  }\n\n  filterAfterByByClassAndProperty(target: any, property: string): AfterArg[] {\n    return this.afters.filter(item => item.target === target && item.property === property);\n  }\n\n  /**\n   * Filters given array by a given target or targets and prevents duplicate property names.\n   */\n  protected filterByTargetAndWithoutDuplicateProperties<T extends { target: Function | string, property: string }>(\n    array: T[],\n    target: (Function | string) | (Function | string)[],\n  ): T[] {\n    const newArray: T[] = [];\n    array.forEach(item => {\n      const sameTarget = target instanceof Array ? target.indexOf(item.target) !== -1 : item.target === target;\n      if (sameTarget) {\n        if (!newArray.find(newItem => newItem.property === item.property))\n          newArray.push(item);\n      }\n    });\n    return newArray;\n  }\n}\n\n\n\n/**\n * Gets metadata args storage.\n * Metadata args storage follows the best practices and stores metadata in a global variable.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n  if (!(global as any).graphqlSchemaMetadataArgsStorage) {\n    (global as any).graphqlSchemaMetadataArgsStorage = new MetadataArgsStorage();\n  }\n\n  return (global as any).graphqlSchemaMetadataArgsStorage;\n}\n"]}