import { AfterMetadata, ArgumentMetadata, BeforeMetadata, ContextMetadata, EntryTypeMetadata, EnumTypeMetadata, EnumValueMetadata, FieldMetadata, ObjectTypeMetadata, OrderByMetadata, RootMetadata, SchemaMetadata, UnionTypeMetadata, InterfaceTypeMetadata } from '../metadata/types';
import { EntryType } from '../metadata/args';
export declare class MetadataBuilder {
    buildEnumMetadata(target: any): EnumTypeMetadata[] | undefined;
    buildUnionTypeMetadata(target: any): UnionTypeMetadata[] | undefined;
    buildInterfaceTypeMetadata(target: any): InterfaceTypeMetadata[] | undefined;
    buildObjectTypeMetadata(target: any): ObjectTypeMetadata[] | undefined;
    buildEntryTypeMetadata(target: any, type: EntryType): EntryTypeMetadata[] | undefined;
    buildSchemaMetadata(target: any): SchemaMetadata[] | undefined;
    buildFieldMetadata(target: any): FieldMetadata[] | undefined;
    protected buildArgumentMetadata(target: any, property: string): ArgumentMetadata[] | undefined;
    protected buildContextMetadata(target: any, property: string): ContextMetadata | undefined;
    protected buildRootMetadata(target: any, property: string): RootMetadata | undefined;
    protected buildOrderByMetadata(target: any, property: string): OrderByMetadata | undefined;
    protected buildBeforeMetadata(target: any, property: string): BeforeMetadata | undefined;
    protected buildEnumValueMetadata(target: any): EnumValueMetadata[] | undefined;
    protected buildAfterMetadata(target: any, property: string): AfterMetadata | undefined;
}
/**
 * Gets metadata builder
 * Metadata builder follows the best practices and stores metadata in a global variable.
 */
export declare function getMetadataBuilder(): MetadataBuilder;
