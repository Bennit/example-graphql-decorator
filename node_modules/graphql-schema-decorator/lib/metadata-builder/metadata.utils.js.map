{"version":3,"file":"metadata.utils.js","sourceRoot":"","sources":["../../src/metadata-builder/metadata.utils.ts"],"names":[],"mappings":";AAAA,gJAAgJ;;AAEhJ;;GAEG;AACH;IAEE;;;;;OAKG;IACH,MAAM,CAAC,kBAAkB,CAAC,MAAgB;QACxC,MAAM,IAAI,GAAe,CAAC,MAAM,CAAC,CAAC;QAClC,MAAM,cAAc,GAAG,CAAC,MAAgB;YACtC,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACjB,cAAc,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC;QACH,CAAC,CAAC;QACF,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,WAAW,CAAC,OAAiB,EAAE,OAAiB;QACrD,MAAM,CAAC,OAAO,CAAC,SAAS,YAAY,OAAO,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,cAAc,CAA6B,KAAU,EAAE,OAAe;QAC3E,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;CAEF;AArCD,sCAqCC","sourcesContent":["// #kudos to @pleerock at https://github.com/typeorm/typeorm/blob/de5cfe71c7c98c1c2689855378812a38cfc051fc/src/metadata-builder/MetadataUtils.ts\n\n/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n\n  /**\n   * Gets given's entity all inherited classes.\n   * Gives in order from parents to children.\n   * For example Post extends ContentModel which extends Unit it will give\n   * [Unit, ContentModel, Post]\n   */\n  static getInheritanceTree(entity: Function): Function[] {\n    const tree: Function[] = [entity];\n    const getPrototypeOf = (object: Function): void => {\n      const proto = Object.getPrototypeOf(object);\n      if (proto) {\n        tree.push(proto);\n        getPrototypeOf(proto);\n      }\n    };\n    getPrototypeOf(entity);\n    return tree;\n  }\n\n  /**\n   * Checks if this table is inherited from another table.\n   */\n  static isInherited(target1: Function, target2: Function) {\n    return target1.prototype instanceof target2;\n  }\n\n  /**\n   * Filters given array of targets by a given classes.\n   * If classes are not given, then it returns array itself.\n   */\n  static filterByTarget<T extends { target?: any }>(array: T[], classes?: any[]): T[] {\n    if (!classes) return array;\n    return array.filter(item => item.target && classes.indexOf(item.target) !== -1);\n  }\n\n}\n"]}