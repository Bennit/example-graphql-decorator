"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schema_type_factory_1 = require("./schema.type-factory");
const graphql_1 = require("graphql");
const enum_value_type_factory_1 = require("./enum-value.type-factory");
const metadata_builder_1 = require("../metadata-builder");
function enumTypeFactory(target) {
    const enumTypeMetadata = metadata_builder_1.getMetadataBuilder()
        .buildEnumMetadata(target)
        .find((value, index) => index === 0);
    if (!enumTypeMetadata.values || enumTypeMetadata.values.length === 0) {
        throw new schema_type_factory_1.SchemaFactoryError('Class annotated by @EnumType() should has one or more fields annotated by @Value()', schema_type_factory_1.SchemaFactoryErrorType.NO_VALUE);
    }
    const values = {};
    enumTypeMetadata.values.forEach(def => {
        values[def.name] = enum_value_type_factory_1.enumValueTypeFactory(target, def);
    });
    return new graphql_1.GraphQLEnumType({
        name: enumTypeMetadata.name,
        description: enumTypeMetadata.description,
        values: values,
    });
}
exports.enumTypeFactory = enumTypeFactory;
//# sourceMappingURL=enum.type-factory.js.map