{"version":3,"file":"union.type-factory.js","sourceRoot":"","sources":["../../src/type-factory/union.type-factory.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAEnC,0DAAyD;AACzD,+DAA0D;AAE1D,0BAAiC,MAAW,EAAE,OAAgB;IAC5D,MAAM,CAAC,qCAAkB,EAAE,CAAC,sBAAsB,CAAC,MAAM,CAAC;SACvD,GAAG,CAAC,QAAQ;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,gBAAgB,CAAC;YAClC,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,WAAW,EAAE,QAAQ,CAAC,QAAQ;YAC9B,KAAK,EAAE,QAAQ,CAAC,KAAK;iBAClB,GAAG,CAAC,IAAI,IAAI,uCAAiB,CAAC,IAAI,EAAE,OAAO,CAA8B,CAAC;iBAC1E,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;SAClB,CAAC,CAAC;IACL,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;AACrC,CAAC;AAbD,4CAaC","sourcesContent":["import * as graphql from 'graphql';\n\nimport { getMetadataBuilder } from '../metadata-builder';\nimport { objectTypeFactory } from './object.type-factory';\n\nexport function unionTypeFactory(target: any, isInput: boolean): graphql.GraphQLUnionType | undefined {\n  return getMetadataBuilder().buildUnionTypeMetadata(target)\n    .map(metadata => {\n      return new graphql.GraphQLUnionType({\n        description: metadata.description,\n        name: metadata.name,\n        resolveType: metadata.resolver,\n        types: metadata.types\n          .map(type => objectTypeFactory(type, isInput) as graphql.GraphQLObjectType)\n          .filter(_ => _), //filter null values\n      });\n    })\n    .find((_, index) => index === 0);\n}\n"]}