{"version":3,"file":"interface.type-factory.js","sourceRoot":"","sources":["../../src/type-factory/interface.type-factory.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAEnC,0DAAyD;AAEzD,6DAAwD;AAExD,IAAI,kBAAkB,GAA2B,EAAE,CAAC;AAEpD,8BAAqC,MAAW;IAC9C,MAAM,CAAC,qCAAkB,EAAE,CAAC,0BAA0B,CAAC,MAAM,CAAC;SAC3D,GAAG,CAAC,QAAQ;QACX,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,oBAAoB,CAAC;gBACnE,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,WAAW,EAAE,QAAQ,CAAC,QAAQ;gBAC9B,MAAM,EAAE,qCAAkB,EAAE;qBACzB,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC;qBACpC,GAAG,CAAC,KAAK,IAAI,CAAC;oBACb,QAAQ,EAAE,KAAK;oBACf,IAAI,EAAE,qCAAgB,CAAC,MAAM,EAAE,KAAK,CAAC;iBACtC,CAAC,CAAC;qBACF,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK;oBACpB,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;oBACzC,MAAM,CAAC,MAAM,CAAC;gBAChB,CAAC,EAAG,EAA2B,CAAC;aACnC,CAAC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;AACrC,CAAC;AAvBD,oDAuBC","sourcesContent":["import * as graphql from 'graphql';\n\nimport { getMetadataBuilder } from '../metadata-builder';\nimport { objectTypeFactory } from './object.type-factory';\nimport { fieldTypeFactory } from './field.type-factory';\n\nlet interfaceTypeCache: { [key: string]: any } = {};\n\nexport function interfaceTypeFactory(target: any): graphql.GraphQLInterfaceType | undefined {\n  return getMetadataBuilder().buildInterfaceTypeMetadata(target)\n    .map(metadata => {\n      if (!interfaceTypeCache[metadata.name]) {\n        interfaceTypeCache[metadata.name] = new graphql.GraphQLInterfaceType({\n          description: metadata.description,\n          name: metadata.name,\n          resolveType: metadata.resolver,\n          fields: getMetadataBuilder()\n            .buildFieldMetadata(target.prototype)\n            .map(field => ({\n              metadata: field,\n              type: fieldTypeFactory(target, field),\n            }))\n            .reduce((fields, field) => {\n              fields[field.metadata.name] = field.type;\n              return fields;\n            } , {} as { [key: string]: any}),\n        });\n      }\n      return interfaceTypeCache[metadata.name];\n    })\n    .find((_, index) => index === 0);\n}\n"]}