{"version":3,"file":"object.type-factory.js","sourceRoot":"","sources":["../../src/type-factory/object.type-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import * as graphql from 'graphql';\n\nimport { SchemaFactoryError, SchemaFactoryErrorType } from './schema.type-factory';\n\nimport { FieldMetadata } from '../metadata/types';\nimport { GraphQLObjectType } from 'graphql';\nimport { ObjectTypeMetadata } from '../metadata/types';\nimport { fieldTypeFactory } from '../type-factory';\nimport { interfaceTypeFactory } from './interface.type-factory';\nimport { getMetadataBuilder } from '../metadata-builder';\nimport { flatten } from '../array.utils';\n\nlet objectTypeRepository: { [key: string]: graphql.GraphQLInputObjectType | graphql.GraphQLObjectType } = {};\n\nexport function clearObjectTypeRepository() {\n    objectTypeRepository = {};\n}\n\nexport function objectTypeFactory(target: Function, isInput: boolean = false): graphql.GraphQLInputObjectType | graphql.GraphQLObjectType {\n    return getMetadataBuilder()\n      .buildObjectTypeMetadata(target)\n      .map(metadata => {\n          const cached = objectTypeRepository[metadata.name];\n          if (cached) {\n              return cached;\n          }\n          if (metadata.isInput !== isInput) {\n              // TODO write test\n              throw new SchemaFactoryError('', SchemaFactoryErrorType.INVALID_OBJECT_TYPE_METADATA);\n          }\n          const fieldMetadataList: { target: Function, field: FieldMetadata}[] = getMetadataBuilder()\n            .buildFieldMetadata(target.prototype)\n            .map(field => ({ target, field }))\n            .concat(\n              flatten(\n                metadata.interfaces.map(interfaceMetadata => flatten(\n                  getMetadataBuilder().buildFieldMetadata(interfaceMetadata.target.prototype).map(field => ({\n                    target: interfaceMetadata.target,\n                    field: field,\n                  })),\n                )),\n              ),\n            );\n          if (fieldMetadataList.length === 0) {\n              throw new SchemaFactoryError('Class annotated by @ObjectType() should has one or more fields annotated by @Field()',\n                SchemaFactoryErrorType.NO_FIELD);\n          }\n\n          const fields = fieldMetadataList.reduce((map, fieldMetadata) => {\n            let field = fieldTypeFactory(fieldMetadata.target, fieldMetadata.field, isInput);\n            if (!field) {\n              throw new SchemaFactoryError(`@ObjectType()'s ${fieldMetadata.field.name} is annotated by @Field() but no type could be inferred`,\n              SchemaFactoryErrorType.NO_FIELD);\n            }\n            map[fieldMetadata.field.name] = field;\n            return map;\n          }, {} as { [key: string]: any });\n\n          const interfaces = metadata.interfaces.map(interfaceMetadata => interfaceTypeFactory(interfaceMetadata.target));\n\n          const params = {\n              name: metadata.name,\n              fields,\n              description: metadata.description,\n              interfaces: interfaces,\n          };\n\n          objectTypeRepository[metadata.name] = isInput ? new graphql.GraphQLInputObjectType(params) : new graphql.GraphQLObjectType(params);\n          return objectTypeRepository[metadata.name];\n      })\n      .find((value, index) => index === 0);\n}\n\nexport function mutationObjectTypeFactory(fieldsDict: any) {\n    let mutationRootObject = new graphql.GraphQLObjectType({\n        name: 'Mutations',\n        description: 'Perform actions over the backend',\n        fields: fieldsDict,\n    });\n\n    return mutationRootObject;\n}\n\nexport function queryObjectTypeFactory(fieldsDict: any) {\n    return new graphql.GraphQLObjectType({\n        name: 'Queries',\n        description: 'Reads from the backend',\n        fields: fieldsDict,\n    });\n}\n\nexport function subscriptionObjectTypeFactory(fieldsDict: any) {\n    return new graphql.GraphQLObjectType({\n        name: 'Subscriptions',\n        description: 'Realtime stream from the backend',\n        fields: fieldsDict,\n    });\n}\n"]}