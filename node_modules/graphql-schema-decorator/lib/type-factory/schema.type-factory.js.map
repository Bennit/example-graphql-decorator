{"version":3,"file":"schema.type-factory.js","sourceRoot":"","sources":["../../src/type-factory/schema.type-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import * as graphql from 'graphql';\n\nimport { EntryType, EntryTypeMetadata, FieldMetadata, ObjectTypeMetadata } from '../metadata';\nimport { GraphQLObjectType, GraphQLSchema } from 'graphql';\nimport { mutationObjectTypeFactory, queryObjectTypeFactory, subscriptionObjectTypeFactory } from './object.type-factory';\n\nimport { fieldTypeFactory } from './field.type-factory';\nimport { objectTypeFactory } from './object.type-factory';\nimport { getMetadataBuilder, getMetadataArgsStorage } from '../metadata-builder';\n\nexport enum SchemaFactoryErrorType {\n  NO_SCHEMA_ANNOTATION,\n  NO_QUERY_FIELD,\n  NO_FIELD,\n  NO_VALUE,\n  NO_TYPE_ORDERBY_PARENT_FIELD,\n  INVALID_OBJECT_TYPE_METADATA,\n  INPUT_FIELD_SHOULD_NOT_BE_FUNC,\n  INPUT_FIELD_SHOULD_NOT_BE_PAGINATED,\n  VALUE_SHOULD_NOT_BE_FUNC,\n  ORDER_BY_OUTSIDE_PAGINATION,\n  INPUT_FIELD_SHOULD_NOT_HAVE_INTERFACE,\n}\n\nexport class SchemaFactoryError extends Error {\n  constructor(msg: string, public type: SchemaFactoryErrorType) {\n    super(msg);\n    this.message = msg;\n  }\n}\n\nfunction getEntryObject(\n  target: any,\n  type: EntryType,\n  mandatory: boolean,\n  entryObjectTypeFactory: (fieldsDict: any) => GraphQLObjectType,\n) {\n\n  const metadatas: EntryTypeMetadata[] = getMetadataBuilder().buildEntryTypeMetadata(target, type);\n  if (mandatory && (!metadatas || metadatas.length === 0)) {\n    throw new SchemaFactoryError(`Target should have @${type} field`, SchemaFactoryErrorType.NO_QUERY_FIELD);\n  }\n\n  let fieldMap = metadatas.map(metadata => {\n    const fieldTarget = Reflect.getMetadata('design:type', metadata.target, metadata.property) as Function;\n    const fieldMetadatas = getMetadataBuilder().buildFieldMetadata(fieldTarget.prototype);\n    return fieldMetadatas.reduce((fields, fieldMetadata) => {\n      fields[fieldMetadata.name] = fieldTypeFactory(fieldTarget, fieldMetadata, undefined, metadata.isSubscription);\n      return fields;\n    }, {} as { [key: string]: any });\n  })\n  .reduce((map, fields) => ({ ...map, ...fields }), {});\n\n  return Object.keys(fieldMap).length > 0 ? entryObjectTypeFactory(fieldMap) : undefined;\n\n}\n\nfunction getAllTypes() {\n  return getMetadataArgsStorage()\n    .objects\n    .filter(arg => arg.interfaces.length > 0)\n    .map(arg => objectTypeFactory(arg.target, arg.isInput));\n}\n\nexport function schemaFactory(target: Function) {\n  if (getMetadataBuilder().buildSchemaMetadata(target).length !== 1) {\n    throw new SchemaFactoryError('One and only one argument of schemaFactory should be annotated with @Schema() decorator',\n      SchemaFactoryErrorType.NO_SCHEMA_ANNOTATION);\n  }\n\n  const query = getEntryObject(target, EntryType.Query, true, queryObjectTypeFactory);\n  const mutation = getEntryObject(target, EntryType.Mutation, false, mutationObjectTypeFactory);\n  const subscription = getEntryObject(target, EntryType.Subscription, false, subscriptionObjectTypeFactory);\n  const types = getAllTypes();\n\n  return new graphql.GraphQLSchema({\n    query: query,\n    mutation: mutation,\n    subscription: subscription,\n    types: types,\n  });\n}\n"]}