"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const schema_type_factory_1 = require("./schema.type-factory");
const metadata_builder_1 = require("../metadata-builder");
class OrderByTypeFactory {
    static orderByFieldEnumFactory(name, values) {
        let valuesDict = {};
        values.forEach((value) => {
            valuesDict[value.name] = {
                description: value.description && value.description,
            };
        });
        return new graphql_1.GraphQLEnumType({
            name: name + 'OrderByFieldEnum',
            description: 'List of available ordering fields.',
            values: valuesDict,
        });
    }
    static orderByInputObjectFactory(name, orderBySortEnumObject, orderByDirectionEnumObject) {
        return new graphql_1.GraphQLInputObjectType({
            name: name + 'OrderingInputObjectType',
            description: 'Ordering object',
            fields: {
                sort: { type: new graphql_1.GraphQLNonNull(orderBySortEnumObject) },
                direction: { type: orderByDirectionEnumObject },
            },
        });
    }
    static orderByDirectionEnumFactory(name) {
        return new graphql_1.GraphQLEnumType({
            name: name + 'OrderByDirectionEnum',
            description: 'List of available ordering directions.',
            values: {
                ASC: {
                    description: 'Ascendent direction',
                },
                DESC: {
                    description: 'Descendant direction',
                },
            },
        });
    }
    static orderByFactory(metadata, args) {
        let orderByFieldArray = [];
        if (args && args['orderBy'] != null) {
            if (metadata.isPagination) {
                if (metadata.type == null) {
                    throw new schema_type_factory_1.SchemaFactoryError('The @Field related to @OrderBy should have its type explicitly defined.', schema_type_factory_1.SchemaFactoryErrorType.NO_TYPE_ORDERBY_PARENT_FIELD);
                }
                // load metadata for pagination returning type to dynamically create an array of
                //  type properties name to use as pagination values
                const fieldMetadataList = metadata_builder_1.getMetadataBuilder().buildFieldMetadata(metadata.type.prototype);
                fieldMetadataList.forEach(def => {
                    let fieldReturnType = def.type;
                    if (fieldReturnType.prototype == null) {
                        orderByFieldArray.push(def);
                    }
                });
                if (metadata.orderBy &&
                    metadata.orderBy.extraColumns &&
                    metadata.orderBy.extraColumns.constructor === Array) {
                    if (metadata.orderBy.shouldIgnoreSchemaFields) {
                        // remove all previous items from `orderByFieldArray`
                        orderByFieldArray.splice(0, Number.POSITIVE_INFINITY);
                    }
                    metadata.orderBy.extraColumns
                        .filter((item) => item && item.constructor === String)
                        .forEach((item) => orderByFieldArray.push({
                        name: item,
                        description: item,
                    }));
                }
                let orderBySortEnumObject = OrderByTypeFactory.orderByFieldEnumFactory(metadata.name, orderByFieldArray);
                let orderByDirectionEnumObject = OrderByTypeFactory.orderByDirectionEnumFactory(metadata.name);
                let orderByInputObject = OrderByTypeFactory.orderByInputObjectFactory(metadata.name, orderBySortEnumObject, orderByDirectionEnumObject);
                let orderByInputObjectArray = new graphql_1.GraphQLList(orderByInputObject);
                args['orderBy'].type = orderByInputObjectArray;
            }
            else {
                throw new schema_type_factory_1.SchemaFactoryError('@OrderBy decorator is only allowed inside a method decorated with @Pagination.', schema_type_factory_1.SchemaFactoryErrorType.ORDER_BY_OUTSIDE_PAGINATION);
            }
        }
        return args;
    }
}
exports.OrderByTypeFactory = OrderByTypeFactory;
//# sourceMappingURL=order-by.type-factory.js.map