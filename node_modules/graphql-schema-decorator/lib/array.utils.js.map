{"version":3,"file":"array.utils.js","sourceRoot":"","sources":["../src/array.utils.ts"],"names":[],"mappings":";;AAAA;;;;GAIG;AACU,QAAA,MAAM,GAAG,CAAC,MAAa,EAAE,MAAa,KAAK,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAE9E;;;;GAIG;AACU,QAAA,OAAO,GAAG,CAAC,CAAqB,EAAE,UAAiB,KAAK,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAM,EAAE,EAAE,CAAC,CAAC;AAE1G;;;GAGG;AACU,QAAA,OAAO,GAAG,CAAC,UAAiB,KAAK,eAAO,CAAC,KAAK;IACzD,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,KAAK,KAAK,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,eAAO,CAAC,IAAI,IAAI,IAAI,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;AACH,CAAC,EAAE,UAAU,CAAC,CAAC","sourcesContent":["/**\n * Concats two arrays\n * @param itemsA first array argument\n * @param itemsB second array argument\n */\nexport const concat = (itemsA: any[], itemsB: any[]) => itemsA.concat(itemsB);\n\n/**\n * Executes a flatMap modifier function to each elements of the array\n * @param λ the flatMap function\n * @param collection the array to apply the flatMap funtion to\n */\nexport const flatMap = (λ: (item: any) => any, collection: any[]) => collection.map(λ).reduce(concat, []);\n\n/**\n * Flattens an array with nested arrays\n * @param collection the array argument\n */\nexport const flatten = (collection: any[]) => flatMap(items => {\n  if (items.constructor === Array) {\n    return flatMap(item => item, items);\n  } else {\n    return items;\n  }\n}, collection);\n"]}