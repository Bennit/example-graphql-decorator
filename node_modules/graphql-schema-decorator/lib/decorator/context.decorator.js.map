{"version":3,"file":"context.decorator.js","sourceRoot":"","sources":["../../src/decorator/context.decorator.ts"],"names":[],"mappings":";;AAAA,0DAA6D;AAE7D;;;;;GAKG;AACH;IACE,MAAM,CAAC,UAAU,MAAW,EAAE,WAAgB,EAAE,KAAa;QAC3D,yCAAsB,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;YACrC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,WAAW;YAChC,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,WAAW;SACtB,CAAC,CAAC;IACL,CAAa,CAAC;AAChB,CAAC;AAVD,kBAUC","sourcesContent":["import { getMetadataArgsStorage } from '../metadata-builder';\n\n/**\n * Ads the ability to add HTTP request context to each resolver function\n * See [Express GraphQL Documentation 'context' Option]{@link https://github.com/graphql/express-graphql#options} for an example\n *\n * @param option Options for an Schema\n */\nexport function Ctx() {\n  return function (target: any, propertyKey: any, index: number) {\n    getMetadataArgsStorage().contexts.push({\n      target: target,\n      name: target.name || propertyKey,\n      description: null,\n      index: index,\n      property: propertyKey,\n    });\n  } as Function;\n}\n"]}