{"version":3,"file":"interface-type.decorator.js","sourceRoot":"","sources":["../../src/decorator/interface-type.decorator.ts"],"names":[],"mappings":";;AAAA,0DAA6D;AAG7D;;;;;GAKG;AACH,uBAAiC,MAA0B;IACzD,MAAM,CAAC,UAAU,MAAW;QAC1B,yCAAsB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC;YACvC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,WAAW,EAAE,MAAM,CAAC,WAAW;SAChC,CAAC,CAAC;IACL,CAAa,CAAC;AAChB,CAAC;AATD,sCASC","sourcesContent":["import { getMetadataArgsStorage } from '../metadata-builder';\nimport { InterfaceOption } from '../index';\n\n/**\n * Interface Type.\n * See [GraphQL Documentation - Interfaces]{@link http://graphql.org/learn/schema/#interfaces}\n *\n * @param option Options for an Interface definition\n */\nexport function InterfaceType<T>(option: InterfaceOption<T>) {\n  return function (target: any) {\n    getMetadataArgsStorage().interfaces.push({\n      target: target,\n      name: target.name,\n      resolver: option.resolver,\n      description: option.description,\n    });\n  } as Function;\n}\n"]}