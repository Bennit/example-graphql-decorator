{"version":3,"file":"union-type.decorator.js","sourceRoot":"","sources":["../../src/decorator/union-type.decorator.ts"],"names":[],"mappings":";;AACA,0DAA6D;AAE7D;;;;;GAKG;AACH,mBAA6B,MAAsB;IACjD,MAAM,CAAC,UAAU,MAAW;QAC1B,yCAAsB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,WAAW,EAAE,MAAM,CAAC,WAAW;SAChC,CAAC,CAAC;IACL,CAAa,CAAC;AAChB,CAAC;AAVD,8BAUC","sourcesContent":["import { UnionOption } from '../metadata';\nimport { getMetadataArgsStorage } from '../metadata-builder';\n\n/**\n * Union Type.\n * See [GraphQL Documentation - Union Types]{@link http://graphql.org/learn/schema/#union-types}\n *\n * @param option Options for an Union Type\n */\nexport function UnionType<T>(option: UnionOption<T>) {\n  return function (target: any) {\n    getMetadataArgsStorage().union.push({\n      target: target,\n      name: target.name,\n      types: option.types,\n      resolver: option.resolver,\n      description: option.description,\n    });\n  } as Function;\n}\n"]}