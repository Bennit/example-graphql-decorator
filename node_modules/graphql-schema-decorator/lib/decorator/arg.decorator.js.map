{"version":3,"file":"arg.decorator.js","sourceRoot":"","sources":["../../src/decorator/arg.decorator.ts"],"names":[],"mappings":";;AACA,0DAA6D;AAE7D;;;;;GAKG;AACH,aAAoB,MAAuB;IACzC,MAAM,CAAC,UAAU,MAAW,EAAE,WAAgB,EAAE,KAAa;QAC3D,yCAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,IAAI;YAC/C,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI;YACjC,OAAO,EAAE,MAAM,GAAG,MAAM,CAAC,OAAO,GAAG,IAAI;YACvC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI;SACtC,CAAC,CAAC;IACL,CAAa,CAAC;AAChB,CAAC;AAbD,kBAaC","sourcesContent":["import { ArgumentOption } from '../metadata';\nimport { getMetadataArgsStorage } from '../metadata-builder';\n\n/**\n * GraphQL Schema field argument\n * See [GraphQL Documentation - Arguments]{@link http://graphql.org/learn/queries/#arguments}\n *\n * @param option Options for an Schema\n */\nexport function Arg(option?: ArgumentOption) {\n  return function (target: any, propertyKey: any, index: number) {\n    getMetadataArgsStorage().arguments.push({\n      target: target,\n      name: option.name,\n      description: option ? option.description : null,\n      index: index,\n      property: propertyKey,\n      type: option ? option.type : null,\n      nonNull: option ? option.nonNull : null,\n      isList: option ? option.isList : null,\n    });\n  } as Function;\n}\n"]}