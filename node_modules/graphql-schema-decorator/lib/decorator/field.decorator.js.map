{"version":3,"file":"field.decorator.js","sourceRoot":"","sources":["../../src/decorator/field.decorator.ts"],"names":[],"mappings":";;AAAA,kDAA6E;AAG7E,8CAAqD;AACrD,0DAA6D;AAE7D;;;;;GAKG;AACH,eAAsB,MAAoB;IACxC,MAAM,CAAC,UAAU,MAAW,EAAE,WAAgB,EAAE,gBAAsB;QACpE,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,IAAI,CAAC,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClF,MAAM,IAAI,iCAAkB,CAAC,UAAU,WAAW,iCAAiC,EACjF,qCAAsB,CAAC,mCAAmC,CAAC,CAAC;QAChE,CAAC;QACD,yCAAsB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;YACnC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,IAAI;YAC/C,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI;YACjC,OAAO,EAAE,MAAM,GAAG,MAAM,CAAC,OAAO,GAAG,IAAI;YACvC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI;YACrC,UAAU,EAAE,MAAM,GAAG,MAAM,CAAC,UAAU,GAAG,IAAI;SAC9C,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,iCAAoB,CAAC,MAAM,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC;QACrE,CAAC;IACH,CAAa,CAAC;AAChB,CAAC;AApBD,sBAoBC","sourcesContent":["import { SchemaFactoryError, SchemaFactoryErrorType } from '../type-factory';\n\nimport { FieldOption } from '../metadata';\nimport { PaginationMiddleware } from '../middleware';\nimport { getMetadataArgsStorage } from '../metadata-builder';\n\n/**\n * GraphQL Schema field\n * See [GraphQL Documentation - Field]{@link http://graphql.org/learn/queries/#fields}\n *\n * @param option Options for an Schema\n */\nexport function Field(option?: FieldOption) {\n  return function (target: any, propertyKey: any, methodDescriptor?: any) {\n    if (option && option.pagination && (!methodDescriptor || !methodDescriptor.value)) {\n      throw new SchemaFactoryError(`Field '${propertyKey}' can't have pagination enabled`,\n        SchemaFactoryErrorType.INPUT_FIELD_SHOULD_NOT_BE_PAGINATED);\n    }\n    getMetadataArgsStorage().fields.push({\n      target: target,\n      name: propertyKey,\n      description: option ? option.description : null,\n      property: propertyKey,\n      type: option ? option.type : null,\n      nonNull: option ? option.nonNull : null,\n      isList: option ? option.isList : null,\n      pagination: option ? option.pagination : null,\n    });\n    if (option && option.pagination) {\n      return PaginationMiddleware(target, propertyKey, methodDescriptor);\n    }\n  } as Function;\n}\n"]}