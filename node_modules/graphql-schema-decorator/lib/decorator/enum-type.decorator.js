"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const metadata_builder_1 = require("../metadata-builder");
/**
 * It can be used just like {@link ObjectType} in order to create {@link GraphQLEnumType} objects.
 * See [GraphQL Documentation - Enum Types]{@http://graphql.org/learn/schema/#enumeration-types}
 *
 * @param option Options for an Enum Type
 */
function EnumType(option) {
    return function (target) {
        metadata_builder_1.getMetadataArgsStorage().enums.push({
            target: target,
            name: target.name,
            description: option ? option.description : null,
        });
    };
}
exports.EnumType = EnumType;
/**
 * Used to define a value for an {@link EnumType} definition.
 *
 * Example usage:
 *
 * ```typescript
 * @EnumType()
 * class MyEnum {
 *   @Value('1', {description: 'Value One'})
 *   VALUE_ONE: string;
 *
 *   @Value('2', {description: 'Value Two'})
 *   VALUE_TWO: string;
 * }
 *```
 *
 * @param value Value to be assigned to the property at schema level
 * @param option Options for a Enum Value
 */
function Value(value, option) {
    return function (target, propertyKey, methodDescriptor) {
        metadata_builder_1.getMetadataArgsStorage().enumValues.push({
            target: target,
            name: propertyKey,
            value: value,
            description: option ? option.description : null,
        });
    };
}
exports.Value = Value;
//# sourceMappingURL=enum-type.decorator.js.map