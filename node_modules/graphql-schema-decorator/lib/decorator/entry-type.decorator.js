"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const args_1 = require("../metadata/args");
const metadata_builder_1 = require("../metadata-builder");
/**
 * It is used to create a root {@link GraphQLObjectType} object as a schema Query
 * See [GraphQL Documentation - Queries and Mutations]{@http://graphql.org/learn/schema/#the-query-and-mutation-types}
 *
 * @param option Options for a Query
 */
function Query(option) {
    return entry(args_1.EntryType.Query, option);
}
exports.Query = Query;
/**
 * It is used to create a root {@link GraphQLObjectType} object as a schema Mutation
 * See [GraphQL Documentation - Queries and Mutations]{@http://graphql.org/learn/schema/#the-query-and-mutation-types}
 *
 * @param option Options for a Mutation
 */
function Mutation(option) {
    return entry(args_1.EntryType.Mutation, option);
}
exports.Mutation = Mutation;
/**
 * It is used to create a root {@link GraphQLObjectType} object as a schema Subscription
 * See [GraphQL Blog - Subscriptions in GraphQL and Relay]{@http://graphql.org/blog/subscriptions-in-graphql-and-relay/}
 *
 * @param option Options for a Subscription
 */
function Subscription(option) {
    return entry(args_1.EntryType.Subscription, option);
}
exports.Subscription = Subscription;
function entry(type, option) {
    return function (target, propertyKey) {
        metadata_builder_1.getMetadataArgsStorage().entries.push({
            target: target,
            name: target.name,
            description: option ? option.description : null,
            property: propertyKey,
            type: type,
        });
    };
}
//# sourceMappingURL=entry-type.decorator.js.map