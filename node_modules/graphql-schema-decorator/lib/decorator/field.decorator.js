"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const type_factory_1 = require("../type-factory");
const middleware_1 = require("../middleware");
const metadata_builder_1 = require("../metadata-builder");
/**
 * GraphQL Schema field
 * See [GraphQL Documentation - Field]{@link http://graphql.org/learn/queries/#fields}
 *
 * @param option Options for an Schema
 */
function Field(option) {
    return function (target, propertyKey, methodDescriptor) {
        if (option && option.pagination && (!methodDescriptor || !methodDescriptor.value)) {
            throw new type_factory_1.SchemaFactoryError(`Field '${propertyKey}' can't have pagination enabled`, type_factory_1.SchemaFactoryErrorType.INPUT_FIELD_SHOULD_NOT_BE_PAGINATED);
        }
        metadata_builder_1.getMetadataArgsStorage().fields.push({
            target: target,
            name: propertyKey,
            description: option ? option.description : null,
            property: propertyKey,
            type: option ? option.type : null,
            nonNull: option ? option.nonNull : null,
            isList: option ? option.isList : null,
            pagination: option ? option.pagination : null,
        });
        if (option && option.pagination) {
            return middleware_1.PaginationMiddleware(target, propertyKey, methodDescriptor);
        }
    };
}
exports.Field = Field;
//# sourceMappingURL=field.decorator.js.map