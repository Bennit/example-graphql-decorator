{"version":3,"file":"entry-type.decorator.js","sourceRoot":"","sources":["../../src/decorator/entry-type.decorator.ts"],"names":[],"mappings":";;AACA,2CAA6C;AAC7C,0DAA6D;AAE7D;;;;;GAKG;AACH,eAAsB,MAAoB;IACxC,MAAM,CAAC,KAAK,CAAC,gBAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACxC,CAAC;AAFD,sBAEC;AAED;;;;;GAKG;AACH,kBAAyB,MAAuB;IAC9C,MAAM,CAAC,KAAK,CAAC,gBAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC3C,CAAC;AAFD,4BAEC;AAED;;;;;GAKG;AACH,sBAA6B,MAA2B;IACtD,MAAM,CAAC,KAAK,CAAC,gBAAS,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AAC/C,CAAC;AAFD,oCAEC;AAED,eAAe,IAAe,EAAE,MAAwB;IACtD,MAAM,CAAC,UAAU,MAAW,EAAE,WAAgB;QAC5C,yCAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,IAAI;YAC/C,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { QueryOption, MutationOption, SubscriptionOption, EntryTypeOption } from '../metadata/options';\nimport { EntryType } from '../metadata/args';\nimport { getMetadataArgsStorage } from '../metadata-builder';\n\n/**\n * It is used to create a root {@link GraphQLObjectType} object as a schema Query\n * See [GraphQL Documentation - Queries and Mutations]{@http://graphql.org/learn/schema/#the-query-and-mutation-types}\n *\n * @param option Options for a Query\n */\nexport function Query(option?: QueryOption) {\n  return entry(EntryType.Query, option);\n}\n\n/**\n * It is used to create a root {@link GraphQLObjectType} object as a schema Mutation\n * See [GraphQL Documentation - Queries and Mutations]{@http://graphql.org/learn/schema/#the-query-and-mutation-types}\n *\n * @param option Options for a Mutation\n */\nexport function Mutation(option?: MutationOption) {\n  return entry(EntryType.Mutation, option);\n}\n\n/**\n * It is used to create a root {@link GraphQLObjectType} object as a schema Subscription\n * See [GraphQL Blog - Subscriptions in GraphQL and Relay]{@http://graphql.org/blog/subscriptions-in-graphql-and-relay/}\n *\n * @param option Options for a Subscription\n */\nexport function Subscription(option?: SubscriptionOption) {\n  return entry(EntryType.Subscription, option);\n}\n\nfunction entry(type: EntryType, option?: EntryTypeOption) {\n  return function (target: any, propertyKey: any) {\n    getMetadataArgsStorage().entries.push({\n      target: target,\n      name: target.name,\n      description: option ? option.description : null,\n      property: propertyKey,\n      type: type,\n    });\n  };\n}\n"]}